# transcribe.py –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

# handlers/transcribe.py
from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram import Dispatcher
from aiogram.fsm.context import FSMContext

from services.downloader import download_file
from services.extractor import extract_audio
from services.transcriber import transcribe_audio
from services.progress import ProgressManager
from utils.splitter import split_text
# handlers/transcribe.py (–¥–æ–±–∞–≤–∏—Ç—å —Å–≤–µ—Ä—Ö—É)
from services.downloader import is_youtube_url, download_youtube
from services.audio_splitter import split_audio  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º

import traceback
import os
import uuid
import asyncio

router = Router()

MAX_LENGTH = 4000
semaphore = asyncio.Semaphore(4)  # –º–∞–∫—Å–∏–º—É–º 3 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∏


@router.message(F.text)
async def handle_youtube(message: Message, state: FSMContext):
    text = message.text.strip()

    if not is_youtube_url(text):
        return

    progress = ProgressManager(message)
    await progress.update(5, "üîó –°–∫–∞—á–∏–≤–∞—é YouTube –≤–∏–¥–µ–æ...")

    file_path = await download_youtube(text)
    print(f"[DEBUG] file_path = {file_path}")
    if not file_path:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.")
        return

    await progress.update(25, "üéµ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ...")
    audio_path = extract_audio(file_path)

    await progress.update(30, "‚úÇÔ∏è –†–∞–∑–±–∏–≤–∞—é –∞—É–¥–∏–æ –Ω–∞ —á–∞—Å—Ç–∏...")
    audio_chunks = split_audio(audio_path, chunk_length_ms=5 * 60 * 1000)  # 5 –º–∏–Ω—É—Ç

    full_transcript = ""

    # –°–æ–∑–¥–∞—ë–º –∫–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    async def process_chunk(idx, chunk_path, total_chunks):
        await progress.update(30 + int(60 * idx / total_chunks), f"üß† –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é —á–∞—Å—Ç—å {idx}/{total_chunks}...")
        text = await transcribe_audio(chunk_path, progress)
        try:
            os.remove(chunk_path)
        except Exception:
            pass
        return text

    async def safe_process_chunk(*args, **kwargs):
        async with semaphore:
            return await process_chunk(*args, **kwargs)

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫—É—Å–∫–∏
    tasks = [safe_process_chunk(idx, path, len(audio_chunks)) for idx, path in enumerate(audio_chunks, start=1)]
    results = await asyncio.gather(*tasks)

    full_transcript = "\n".join(results)


    await progress.update(90, "üìÑ –†–∞–∑–±–∏–≤–∞—é —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏...")

    chunks = split_text(full_transcript)

    await progress.update(100, "‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

    try:
        for i, part in enumerate(chunks, start=1):
            await message.answer(f"üìÑ –ß–∞—Å—Ç—å {i}:\n{part}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")

    try:
        os.remove(file_path)
        os.remove(audio_path)
    except Exception:
        pass