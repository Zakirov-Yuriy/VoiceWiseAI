# –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

# handlers/transcribe.py
from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram import Dispatcher
from aiogram.fsm.context import FSMContext

from services.downloader import download_file
from services.extractor import extract_audio
from services.transcriber import transcribe_audio
from services.progress import ProgressManager
from utils.splitter import split_text
# handlers/transcribe.py (–¥–æ–±–∞–≤–∏—Ç—å —Å–≤–µ—Ä—Ö—É)
from services.downloader import is_youtube_url, download_youtube


import os
import uuid

router = Router()


@router.message(F.text)
async def handle_youtube(message: Message, state: FSMContext):
    text = message.text.strip()

    if not is_youtube_url(text):
        return  # –Ω–µ YouTube, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

    progress = ProgressManager(message)
    await progress.update(5, "üîó –°–∫–∞—á–∏–≤–∞—é YouTube –≤–∏–¥–µ–æ...")

    file_path = await download_youtube(text)
    if not file_path:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.")
        return

    await progress.update(25, "üéµ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ...")
    audio_path = extract_audio(file_path)  # –∑–¥–µ—Å—å —É–±–∏—Ä–∞–µ–º await, —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è

    await progress.update(40, "üß† –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é...")
    transcript = await transcribe_audio(audio_path, progress)

    await progress.update(90, "üìÑ –†–∞–∑–±–∏–≤–∞—é —Ç–µ–∫—Å—Ç...")
    chunks = split_text(transcript)

    await progress.update(100, "‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

    for i, part in enumerate(chunks, start=1):
        await message.answer(f"üìÑ –ß–∞—Å—Ç—å {i}:\n{part}")

    os.remove(file_path)
    os.remove(audio_path)
