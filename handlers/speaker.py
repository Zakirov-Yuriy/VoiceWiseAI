from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

import os
from services.downloader import is_youtube_url, download_youtube
from services.extractor import extract_audio

from services.progress import ProgressManager
from utils.splitter import split_text

router = Router()

@router.message(F.text)
async def handle_speaker_youtube(message: Message, state: FSMContext):
    if message.text.strip() != "/—Å–ø–∏–∫–µ—Ä—ã":
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã

    await message.answer("üîó –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–ø–∏–∫–µ—Ä–æ–≤.")
    await state.set_state("waiting_for_speaker_video")

@router.message(F.text & F.state == "waiting_for_speaker_video")
async def process_speaker_video(message: Message, state: FSMContext):
    text = message.text.strip()

    if not is_youtube_url(text):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ YouTube-—Å—Å—ã–ª–∫—É.")
        return

    progress = ProgressManager(message)
    await progress.update(5, "üì• –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")

    file_path = await download_youtube(text)
    if not file_path:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.")
        return

    await progress.update(25, "üéµ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ...")
    audio_path = extract_audio(file_path)

    await progress.update(50, "üß† –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Å–ø–∏–∫–µ—Ä–æ–≤...")
    transcript = diarize_audio(audio_path)

    await progress.update(90, "üìÑ –†–∞–∑–±–∏–≤–∞—é —Ç–µ–∫—Å—Ç...")
    chunks = split_text(transcript)

    await progress.update(100, "‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

    for i, part in enumerate(chunks, start=1):
        await message.answer(f"üìÑ –ß–∞—Å—Ç—å {i}:\n{part}")

    os.remove(file_path)
    os.remove(audio_path)
    await state.clear()
